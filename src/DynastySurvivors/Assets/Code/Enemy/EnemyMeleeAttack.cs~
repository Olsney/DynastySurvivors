using System.Linq;
using Code.Infrastructure.Factory;
using Code.Logic;
using UnityEngine;
using Zenject;

namespace Code.Enemy
{
    public class EnemyMeleeAttack : EnemyAttack
    {
        private const string HeroLayerMask = "Player";

        [SerializeField] private Cooldown _cooldown;
        [SerializeField] private EnemyAnimator _enemyAnimator;
        [SerializeField] private float _attackDamage = 50f;
        [SerializeField] private float _attackCooldown = 3f;
        [SerializeField] private float _attackOffsetY = 0.5f;
        [SerializeField] private float _attackOffsetForward = 0.5f;
        [SerializeField] private float _attackCleavage = 0.5f;

        private IGameFactory _gameFactory;
        private Transform _heroTransform;
        private float _attackCooldownTimer;
        private bool _isAttacking;
        private int _heroLayerMask;
        private Collider[] _hitsBuffer = new Collider[1];
        private bool _isAttackEnabled;

        [Inject]
        private void Construct(IGameFactory gameFactory)
        {
            _gameFactory = gameFactory;
        }

        private void Awake()
        {
            _heroLayerMask = 1 << LayerMask.NameToLayer(HeroLayerMask);

            GameObject heroGameObject = _gameFactory.HeroGameObject;

            if (heroGameObject != null)
                _heroTransform = heroGameObject.transform;
            else
                _gameFactory.HeroCreated += OnHeroCreated;
        }

        private void Update()
        {
            UpdateCooldown();

            if (CanAttack())
                StartAttack();
        }

        public override void EnableAttack()
        {
            
        }

        public override void DisableAttack()
        {
        }

        private void UpdateCooldown()
        {
            if (IsAttackOnCooldown())
                _attackCooldownTimer -= Time.deltaTime;
        }

        private bool CanAttack() =>
            _isAttackEnabled && !_isAttacking && !_cooldown.IsOnCooldown();

        private void StartAttack()
        {
            transform.LookAt(_heroTransform);
            _enemyAnimator.PlayAttack();

            _isAttacking = true;
        }

        private bool IsAttackOnCooldown() =>
            _attackCooldownTimer > 0f;

        private void OnHeroCreated() =>
            _heroTransform = _gameFactory.HeroGameObject.transform;

        private void OnAttack()
        {
            if (IsHitted(out Collider hit))
            {
                float drawDuration = 2f;
                
                PhysicsDebugHelpers.DrawRaysFromPoint(GetAttackStartPosition(), _attackCleavage, Color.red, drawDuration );
            }
            
        }

        private bool IsHitted(out Collider hit)
        {
            int hitsCount = Physics.OverlapSphereNonAlloc(GetAttackStartPosition(), _attackCleavage, _hitsBuffer, _heroLayerMask);

            hit = _hitsBuffer.FirstOrDefault();

            return hitsCount > 0;
        }
        
        private Vector3 GetAttackStartPosition() =>
            new Vector3(transform.position.x, transform.position.y + _attackOffsetY, transform.position.z) + _attackOffsetForward * transform.forward;

        private void OnAttackEnded()
        {
            _cooldown.SetCooldown(_attackCooldown);
        }
    }
}